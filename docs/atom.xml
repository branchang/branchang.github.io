<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title></title>
 <link href="/atom.xml" rel="self"/>
 <link href=""/>
 <updated>2019-07-22T10:56:56+08:00</updated>
 <id>/</id>
 <author>
   <name></name>
 </author>

 
 <entry>
   <title>MySQL 加锁队列实现</title>
   <link href="/posts/mysql-queue/"/>
   <updated>2019-07-11T00:00:00+08:00</updated>
   <id>/posts/mysql-queue</id>
   <content type="html">&lt;p&gt;Mysql的加锁队列的实现&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Example Post</title>
   <link href="/posts/example-post/"/>
   <updated>2018-01-01T00:00:00+08:00</updated>
   <id>/posts/example-post</id>
   <content type="html">&lt;h2 id=&quot;typograpy&quot;&gt;Typograpy&lt;/h2&gt;

&lt;h1 id=&quot;h1&quot;&gt;H1&lt;/h1&gt;

&lt;h2 id=&quot;h2&quot;&gt;H2&lt;/h2&gt;

&lt;h3 id=&quot;h3&quot;&gt;H3&lt;/h3&gt;

&lt;h4 id=&quot;h4&quot;&gt;H4&lt;/h4&gt;

&lt;h5 id=&quot;h5&quot;&gt;H5&lt;/h5&gt;

&lt;h2 id=&quot;tables&quot;&gt;Tables&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Company&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Contact&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;Country&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Alfreds Futterkiste&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Maria Anders&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;Germany&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Island Trading&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Helen Bennett&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;UK&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Magazzini Alimentari Riuniti&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Giovanni Rovelli&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;Italy&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;code-snippet&quot;&gt;Code Snippet&lt;/h2&gt;

&lt;h3 id=&quot;code-hightlight&quot;&gt;Code hightlight&lt;/h3&gt;

&lt;p&gt;This is a &lt;code class=&quot;highlighter-rouge&quot;&gt;sample&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;code hightlight&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;liquid-raw&quot;&gt;liquid raw&lt;/h3&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-liquid&quot; data-lang=&quot;liquid&quot;&gt;&lt;span class=&quot;p&quot;&gt;{%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;highlight&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;html&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;%}&lt;/span&gt;
&amp;lt;p&amp;gt;This is some text in a paragraph.&amp;lt;/p&amp;gt;
&lt;span class=&quot;p&quot;&gt;{%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;endhighlight&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;%}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;xml&quot;&gt;XML&lt;/h3&gt;
&lt;!-- https://github.com/penibelst/jekyll-compress-html/issues/71#issuecomment-188144901 --&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;navMap&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;navPoint&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;playOrder=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;toc-1&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;navLabel&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;text&amp;gt;&lt;/span&gt;Vol_26&lt;span class=&quot;nt&quot;&gt;&amp;lt;/text&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;text&amp;gt;&lt;/span&gt;No.375 比达、杜拉格斯出发&lt;span class=&quot;nt&quot;&gt;&amp;lt;/text&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;/navLabel&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;content&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Text/part0007.xhtml&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/navPoint&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/navPoint&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/navMap&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/figure&gt;

&lt;h3 id=&quot;html&quot;&gt;HTML&lt;/h3&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;{% highlight html linenos %}
&lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;{% if site.data.showAuthor %}Author:{{ site.data.author }}{% endif %}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;This is some text in a paragraph.&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
{% endhighlight %}&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;html-linenos&quot;&gt;html-linenos&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;No-Scrolling&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- https://github.com/penibelst/jekyll-compress-html/issues/71#issuecomment-188144901 --&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;panel-group&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;panel panel-default&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;panel-heading&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{{ category_name }}&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;i&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;far fa-folder&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/i&amp;gt;&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;&amp;amp;nbsp;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  {% endif %}
{% endfor %}
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;Scrolling Horizontal&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- https://github.com/penibelst/jekyll-compress-html/issues/71#issuecomment-188144901 --&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;panel-group&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;panel panel-default&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;panel-heading&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{{ category_name }}&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;i&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;far fa-folder&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/i&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;This is a very long long long long long long long long long long long long long long long long long long long long long line.&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  {% endif %}
{% endfor %}
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/figure&gt;

&lt;h4 id=&quot;markdown-html&quot;&gt;MarkDown-html&lt;/h4&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{% highlight html linenos %}
{% raw %}
&lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;{% if site.data.showAuthor %}Author:{{ site.data.author }}{% endif %}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;This is some text in a paragraph.&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
{% endraw %}
{% endhighlight %}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;bash&quot;&gt;Bash&lt;/h3&gt;

&lt;!-- https://github.com/penibelst/jekyll-compress-html/issues/71#issuecomment-188144901 --&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;server &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

  listen   443 ssl&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  ssl on&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  server_name blog.cotes.in&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  ssl_certificate /etc/letsencrypt/live/blog.cotes.in/fullchain.pem&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  ssl_certificate_key /etc/letsencrypt/live/blog.cotes.in/privkey.pem&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/figure&gt;

&lt;h2 id=&quot;image-sample&quot;&gt;Image Sample&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/sample/mockup.jpg&quot; alt=&quot;Desktop View&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;footnote-sample&quot;&gt;Footnote Sample&lt;/h2&gt;

&lt;p&gt;Some long sentence. &lt;sup id=&quot;fnref:footnote&quot;&gt;&lt;a href=&quot;#fn:footnote&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:footnote&quot;&gt;
      &lt;p&gt;Test, &lt;a href=&quot;https://google.com&quot;&gt;Link&lt;/a&gt;. &lt;a href=&quot;#fnref:footnote&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>GNU Peoject</title>
   <link href="/posts/GNU-Project/"/>
   <updated>2018-01-01T00:00:00+08:00</updated>
   <id>/posts/GNU-Project</id>
   <content type="html">&lt;p&gt;Bison is a general-purpose parser generator that converts an annotated context-free grammar into a deterministic LR or generalized LR (GLR) parser employing LALR(1) parser tables.
cpio
Complexity
Coreutils - GNU core utilities
GNU Common C++
cflow analyzes a collection of C source files and prints a graph, charting control flow within the program&lt;/p&gt;

&lt;p&gt;Dico implements a flexible dictionary server and client according to RFC 2229 (DICT Server)&lt;/p&gt;

&lt;p&gt;DMD is a daemon-managing daemon, meaning that it manages the execution of system services, replacing similar functionality found in typical init systems&lt;/p&gt;

&lt;p&gt;Ed is a line-oriented text editor: rather than offering an overview of a document, ed performs editing one line at a time&lt;/p&gt;

&lt;p&gt;GNU dbm is a library of functions implementing a hashed database on a disk file.&lt;/p&gt;

&lt;p&gt;GNU Gengetopt
This program generates a C function that uses getopt_long function to parse the command line options, to validate them and fills a struct .&lt;/p&gt;

&lt;p&gt;GMediaServer is a UPnP compatible media server for the GNU system. It is part of the GNU project&lt;/p&gt;

&lt;p&gt;The GNUmed project builds free, liberated open source Electronic Medical Record software in multiple languages to assist and improve longitudinal care (specifically in ambulatory settings, i.e. multi-professional practices and clinics).&lt;/p&gt;

&lt;p&gt;GNUMP3d is a streaming server for MP3s, OGG vorbis files, movies and other media formats&lt;/p&gt;

&lt;p&gt;GNU Robots is a game/diversion where you construct a program for a little robot, then watch him explore a world.&lt;/p&gt;

&lt;p&gt;GNU Radio is a free &amp;amp; open-source software development toolkit that provides signal processing blocks to implement software radios. It can be used with readily-available low-cost external RF hardware to create software-defined radios, or without hardware in a simulation-like environment. It is widely used in hobbyist, academic and commercial environments to support both wireless communications research and real-world radio systems.&lt;/p&gt;

&lt;p&gt;GNUnet is a framework for secure peer-to-peer networking that does not use any centralized or otherwise trusted services.&lt;/p&gt;

&lt;p&gt;GNU gperf is a perfect hash function generator. For a given list of strings, it produces a hash function and hash table, in form of C or C++ code, for looking up a value depending on the input string. The hash function is perfect, which means that the hash table has no collisions, and the hash table lookup needs a single string comparison only.&lt;/p&gt;

&lt;p&gt;Groff (GNU troff) is a typesetting system that reads plain text mixed with formatting commands and produces formatted output&lt;/p&gt;

&lt;p&gt;GRUB is a multiboot bootloader.&lt;/p&gt;

&lt;p&gt;GNU SASL is an implementation of the Simple Authentication and Security Layer framework. On network servers such as IMAP or SMTP servers, SASL is used to handle client/server authentication. This package contains both a library and a command-line tool to access the library.&lt;/p&gt;

&lt;p&gt;GNU Guix is a purely functional package manager for the GNU system distribution.&lt;/p&gt;

&lt;p&gt;The GNU Generic Security Service provides a free implementation of the GSS-API specification.&lt;/p&gt;

&lt;p&gt;Guile is a library designed to help programmers create flexible applications. Using Guile in an application allows the application’s functionality to be extended by users or other programmers with plug-ins, modules, or scripts. Guile provides what might be described as “practical software freedom,” making it possible for users to customize an application to meet their needs without digging into the application’s internals&lt;/p&gt;

&lt;p&gt;GNU Health is a free medical software system, including support for electronic medical records (EMR), a hospital information system (HIS), and health information system. It supports both Spanish and English interfaces. It has been adopted by the United Nations University for implementation and training, and several hospitals and health ministries around the world.&lt;/p&gt;

&lt;p&gt;Inetutils is a collection of common network programs, such as an ftp client and server, a telnet client and server, and an rsh client and server.&lt;/p&gt;

&lt;p&gt;The indent program can be used to make code easier to read. It can also convert from one style of writing C to another. indent understands a substantial amount about the syntax of C, but it also attempts to cope with incomplete and misformed syntax.&lt;/p&gt;

&lt;p&gt;GNU Leg is a set of libraries for game engines and game development. In addition to the libraries, it also includes resource editors designed to make game creation easier. The package is designed to be generic and modular, supporting many different styles of games.&lt;/p&gt;

&lt;p&gt;libdbh provides disk-based hash tables, providing quick lookup of key-value pairs. While its usage is similar in general to that of (G)DBM, it has a different design supporting advanced, atypical usage.&lt;/p&gt;

&lt;p&gt;libiconv provides an implementation of the iconv function for systems that lack it. iconv is used to convert between character encodings in a program. It supports a wide variety of different encodings.&lt;/p&gt;

&lt;p&gt;GNU libmicrohttpd is a small, embeddable HTTP server implemented as a C library. It makes it easy to run an HTTP server as part of another application. The library is fully HTTP 1.1 compliant. It can listen on multiple ports, supports four different threading models, and supports IPv6. It also features security features such as basic and digest authentication and support for SSL3 and TLS&lt;/p&gt;

&lt;p&gt;Mailman is free software for managing electronic mail discussion and e-newsletter lists. Mailman is integrated with the web, making it easy for users to manage their accounts and for list owners to administer their lists. Mailman supports built-in archiving, automatic bounce processing, content filtering, digest delivery, spam filters, and more. See the features page for details.
Mailman is free software, distributed under the GNU General Public License. Mailman is written in the Python programming language, with a little bit of C code for security.&lt;/p&gt;

&lt;p&gt;MediaGoblin is a free software media publishing platform that anyone can run.GNU MediaGoblin is a free media publishing platform. It runs in a federalized manner, freeing the user from centralized web services. It supports pictures, videos and audio.&lt;/p&gt;

&lt;p&gt;[arithmetic]
GNU MPC is a C library for performing arithmetic on complex numbers. It supports arbitrarily high precision and it correctly rounds the results
GNU MPFR is a C library for performing multiple-precision, floating-point computations with correct rounding
GNU MPRIA is a C library for performing rational arithmetic computations with arbitrarily high precision. It builds on the GMP library
GNU Octave is a high-level interpreted language that is specialized for numerical computations. It can be used for both linear and non-linear applications and it provides great support for visualizing results. Work may be performed both at the interactive command-line as well as via script files.&lt;/p&gt;

&lt;p&gt;[Game]
GNU motti is a simple multiplayer strategy game. The objective of the game is to conquer enemies’ capitals by occupying and encircling their territories. The game map is an array of square cells.’&lt;/p&gt;

&lt;p&gt;The GNU Role Playing Game Engine provides an engine for creating two-dimensional, graphical role-playing games, providing, for example, a sprite-tiling grid, sprite rendering, and event handling&lt;/p&gt;

&lt;p&gt;[Tools]
GNU Mtools is a set of utilities for accessing MS-DOS disks from a GNU or Unix system. It supports long file names and multiple disk formats. It also supports some FAT-specific features such as volume labels and FAT-specific file attributes. 
GNU paxutils is a suite of archive utilities. It contains versions of the cpio, tar and pax archivers.
GNU Parted is a package for creating and manipulating disk partition tables. It includes a library and command-line utility.
GNU Rush is a restricted user shell, for systems on which users are to be provided with only limited functionality or resources. Administrators set user rights via a configuration file which can be used to limit, for example, the commands that can be executed, CPU time, or virtual memory usage.&lt;/p&gt;

&lt;p&gt;GNU Wget is a free software package for retrieving files using HTTP, HTTPS and FTP, the most widely-used Internet protocols. It is a non-interactive commandline tool, so it may easily be called from scripts, cron jobs, terminals without X-Windows support, etc&lt;/p&gt;

&lt;p&gt;[Text Edit]
GNU Nano is a small and simple text editor. In addition to basic editing, it supports interactive search and replace, go to line and column number, auto-indentation and more.&lt;/p&gt;

&lt;p&gt;[Cryptographic]
Nettle is a cryptographic library that is designed to fit easily in more or less any context: In crypto toolkits for object-oriented languages (C++, Python, Pike, …), in applications like LSH or GNUPG, or even in kernel space.&lt;/p&gt;

&lt;p&gt;[Protocol]
GNU oSIP is an implementation of the SIP protocol. It is used to provide multimedia and telecom software developers with an interface to initiate and control SIP sessions.&lt;/p&gt;

&lt;p&gt;[other]
GNU Pth is a portable library providing non-preemptive, priority-based scheduling for multiple execution threads. Each thread has its own program-counter, run-time stack, signal mask and errno variable. Threads are scheduled in a cooperative way, rather than in the standard preemptive way, such that they are managed according to priority and events. However, Pth also features emulation of POSIX.1c threads (pthreads) for backwards compatibility.&lt;/p&gt;

&lt;p&gt;The GNU readline library allows users to edit command lines as they are typed in. It can maintain a searchable history of previously entered commands, letting you easily recall, edit and re-enter past commands. It features both Emacs-like and vi-like keybindings, making its usage comfortable for anyone&lt;/p&gt;

&lt;p&gt;GNU SHMM is a shared memory manager. It can read or write to shared memory. It also supports other commands such as locking or unlocking a block of shared memory identified by key and size&lt;/p&gt;

&lt;p&gt;GNU SIP Witch is a peer-to-peer Voice-over-IP server that uses the SIP protocol. Calls can be made from behind NAT firewalls and without the need for a service provider. Its peer-to-peer design ensures that there is no central point for media intercept or capture and thus it can be used to construct a secure telephone system that operates over the public internet.&lt;/p&gt;

&lt;p&gt;[Python]&lt;/p&gt;

&lt;p&gt;GNU pyconfigure provides template files for easily implementing standards-compliant configure scripts and Makefiles for Python-based packages. It is designed to work alongside existing Python setup scripts, making it easy to integrate into existing projects. Powerful and flexible Autoconf macros are available, allowing you to easily make adjustments to the installation procedure based on the capabilities of the target computer.&lt;/p&gt;

&lt;p&gt;[Network]&lt;/p&gt;

&lt;p&gt;Serveez is a server framework. It provides routines and help for implementing IP based servers (currently TCP, UDP and ICMP). It is also possible to use named pipes for all connection oriented protocols.&lt;/p&gt;

&lt;p&gt;[Database]
WB is a disk based (sorted) associative-array database package providing C, SCM, Java, and C# libraries. These associative arrays consist of variable length (0.B to 255.B) keys and values.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>scrot使用imlib2的截图工具</title>
   <link href="/posts/read-scrot-sourcecode/"/>
   <updated>2018-01-01T00:00:00+08:00</updated>
   <id>/posts/read-scrot-sourcecode</id>
   <content type="html">&lt;p&gt;scrot使用imlib2的幕截图工具.
用xlib和imlib2,而imlib2 还包含作者自己的工具库giblib.&lt;/p&gt;

&lt;p&gt;giblib is a simple library which wraps imlib2. It provides a wrapper to imlib2’s context API，avoiding all the context_get/set calls, adds fontstyles to the truetype renderer and supplies a generic doubly-linked list and some string functions&lt;/p&gt;

&lt;h4 id=&quot;mainc主逻辑分析&quot;&gt;main.c主逻辑分析&lt;/h4&gt;
&lt;p&gt;初始化xlib与imlib配置
结构主要分为解析options部分,imlib图形使用,和主要逻辑,
作者使用全局opt变量用来保存全局配置,方便其他函数调用修改.
代码根据程序执行时的配置参数执行不同的逻辑分支.
通过image镜像生成图片文件保存&lt;/p&gt;

&lt;p&gt;虽然程序参数选择中含有多窗口的截图,但是由于程序初始化是只初始化一个window所以-m无用&lt;/p&gt;

&lt;p&gt;程序-s选项提供给用户区域截图或者截取某个windows的功能&lt;/p&gt;

&lt;p&gt;代码的主要框架也是顺序流程,从程序执行初始化到后面交互再到以后的保存图像,并没有多少逻辑分支&lt;/p&gt;

&lt;h4 id=&quot;optionsc-解析配置参数&quot;&gt;options.c 解析配置参数&lt;/h4&gt;
&lt;p&gt;包含opt的声明.通过getopt_long解析参数.&lt;/p&gt;

&lt;h4 id=&quot;imlibc-初始化x与imlib库&quot;&gt;imlib.c 初始化x与imlib库&lt;/h4&gt;
&lt;p&gt;初始化了一个windows&lt;/p&gt;

&lt;p&gt;只初步了解了一些xlib的函数使用,具体原理还需了解
源码中涉及libx11的内容较多,后续学习时候可以参考使用,在此就不做分析&lt;/p&gt;

&lt;h4 id=&quot;参考文献&quot;&gt;参考文献&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;http://www.x.org/releases/X11R7.7/doc/libX11/libX11/libX11.html&quot;&gt;xlib&lt;/a&gt;
&lt;a href=&quot;http://adesklets.sourceforge.net/doc/imlib2/imlib2_8c.html#a14&quot;&gt;imlib2&lt;/a&gt;
&lt;a href=&quot;http://www.cs.tut.fi/lintula/manual/gtk/glib/glib-string-utility-functions.html&quot;&gt;giblib&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>autoconf,automake构建项目</title>
   <link href="/posts/autotool/"/>
   <updated>2015-06-07T00:00:00+08:00</updated>
   <id>/posts/autotool</id>
   <content type="html">&lt;p&gt;经常接触开源程序的对源程序的编译过程一致都不算了解,configure,make,make install,只是大概知道使用的是gnu 组件autoconf,automake,现在想自己想构建一个项目，大算大概了解一下，由于本身autotool工具的使用较为复杂所以这里只涉及基本概念. &lt;br /&gt;
automake,autoconf 从gnu官网现在安装即可.两个工具集是由perl和shell编写的.&lt;br /&gt;
使用autotool并没有想象的繁琐，只需按步骤执行与修改对应文件.&lt;/p&gt;

&lt;h3 id=&quot;autoscan&quot;&gt;autoscan&lt;/h3&gt;
&lt;p&gt;源码根目录调用autoscan脚本,生成对应的configure.scan文件,修改文件名为configure.ac.后续configure.ac会调用系列autoconf宏来测试程序需要用到的特性系统是否满足.&lt;br /&gt;
configure.scan文件格式&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;AC_INIT
测试程序
测试函数库
测试头文件
测试类型定义
测试结构
测试编译器特性
测试库函数
测试系统调用
AC_OUTPUT&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;1 #                                               -*- Autoconf -*-
2 # Process this file with autoconf to produce a configure script.
3
4 AC_PREREQ([2.69])
5 AC_INIT([FULL-PACKAGE-NAME], [VERSION], [BUG-REPORT-ADDRESS])
6 AC_CONFIG_SRCDIR([config.h.in])
7 AC_CONFIG_HEADERS([config.h])
8 AM_INIT_AUTOMAKE([foreign -Wall -Werror])
9
10 # Checks for programs.
11 AC_PROG_CC
12 AC_PROG_RANLIB
13 AM_PROG_AR
14
15 # Checks for libraries.
16
17 # Checks for header files.
18 AC_CHECK_HEADERS([stdlib.h string.h])
19
20 # Checks for typedefs, structures, and compiler characteristics.
21 AC_TYPE_SIZE_T
22
23 # Checks for library functions.
24 AC_FUNC_MALLOC
25 AC_FUNC_REALLOC
26 AC_CHECK_FUNCS([memset])
27
28 AC_CONFIG_FILES([Makefile
29                  example/Makefile
30                  src/Makefile])
31 AC_OUTPUT&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;AC_PREREQ&lt;/strong&gt;:宏声明了autoconf的版本&lt;br /&gt;
&lt;strong&gt;AC_INIT&lt;/strong&gt;:用来定义软件名称，版本,邮箱地址&lt;br /&gt;
&lt;strong&gt;AC_PREREQ&lt;/strong&gt;:宏声明了autoconf的版本&lt;br /&gt;
&lt;strong&gt;AC_INIT&lt;/strong&gt;:用来定义软件名称，版本,邮箱地址&lt;br /&gt;
&lt;strong&gt;AC_CONFIG_SRCDIR&lt;/strong&gt;:检查源文件是否存在的，来确定文件的有效性,一般是指向main函数所在源文件.&lt;br /&gt;
&lt;strong&gt;AC_CONFIG_HEADERS&lt;/strong&gt;:宏用于生成config.h文件，以便autoheader命令使用 &lt;br /&gt;
&lt;strong&gt;AC_INIT_AUTOMAKE&lt;/strong&gt;:aclocal生成m4文件必须有的参数，用于指明模块或者指明no-define编译参数参数&lt;br /&gt;
&lt;strong&gt;AC_PROG_CC&lt;/strong&gt;:用来指定编译器，如果不指定,默认使用gcc&lt;br /&gt;
&lt;strong&gt;AC_PROG_RANLIB&lt;/strong&gt;:
&lt;strong&gt;AC_CONFIG_FILES&lt;/strong&gt;:指明需要的Makfile文件路径&lt;br /&gt;
&lt;strong&gt;AC_OUTPUT&lt;/strong&gt;: Every Autoconf script, e.g., configure.ac, should finish by calling AC_OUTPUT. That is the macro that generates and runs config.status, which in turn creates the makefiles and any other files resulting from configuration &lt;br /&gt;
&lt;strong&gt;AC_PROG_RANLIB&lt;/strong&gt;:生成静态库要用它（生成库索引）
&lt;strong&gt;AC_PROG_LIBTOOL&lt;/strong&gt;:如果只生成静态库，用ranlib即可。动态库得用libtool&lt;/p&gt;

&lt;p&gt;需要注意的是如果使用libtool编译，则选项如下，注意使用了libtool则需要将AC_PROG_RANLIB去掉&lt;/p&gt;

&lt;h3 id=&quot;aclocal&quot;&gt;aclocal&lt;/h3&gt;
&lt;p&gt;执行aclocal生成需要的m4文件,aclocal根据configure.in文件的内容，自动生成aclocal.m4文件, autoconf需要GNU m4宏处理器来处理aclocal.m4，生成configure脚本.&lt;br /&gt;
这里要注意的是如果m4文件没有生成，有可能的原因就是AC_INIT_AUTOMAKE没有写明.&lt;/p&gt;
&lt;h3 id=&quot;autoconf&quot;&gt;autoconf&lt;/h3&gt;
&lt;p&gt;autoconf根据m4文件与configure.ac生成项目需要的configure&lt;/p&gt;
&lt;h3 id=&quot;autoheader&quot;&gt;autoheader&lt;/h3&gt;
&lt;p&gt;负责生成config.h.in文件&lt;/p&gt;
&lt;h3 id=&quot;automake-adding-missing&quot;&gt;automake —adding-missing&lt;/h3&gt;
&lt;p&gt;这是这里是很重要的一步,通过Makefile.am生成对应的Makefile.in文件&lt;/p&gt;
&lt;h4 id=&quot;makefileam规则&quot;&gt;Makefile.am规则&lt;/h4&gt;
&lt;p&gt;Makefile.am的总原则 ──── “写Makefile是写规则，而写Makefile.am是一些赋值而已”
编写Makefile.am主要是完成3件事情：编译(make)、安装(make install)、打包(make dist)&lt;br /&gt;
常见的文件编译类型有下面几种：&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;PROGRAMS 表示可执行文件.&lt;/li&gt;
  &lt;li&gt;LIBRARIES 表示库文件.&lt;/li&gt;
  &lt;li&gt;LTLIBRARIES 这也是表示库文件，前面的LT表示libtool.&lt;/li&gt;
  &lt;li&gt;HEADERS 头文件.&lt;/li&gt;
  &lt;li&gt;SCRIPTS 脚本文件，这个可以被用于执行。如：example_SCRIPTS，如果用这样的话，需要我们自己定义安装目录下的example目录，很容易的，往下看.&lt;/li&gt;
  &lt;li&gt;DATA 数据文件，不能执行.&lt;/li&gt;
&lt;/ol&gt;
&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;文件类型&lt;/th&gt;
      &lt;th&gt;书写格式&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tfoot&gt;
    &lt;tr&gt;
      &lt;td&gt;可执行文件&lt;/td&gt;
      &lt;td&gt;
      bin\_PROGRAMS = foo &lt;br /&gt;
      foo\_SOURCES = foo.c &lt;br /&gt;
      foo\_LDADD = &lt;br /&gt;
      foo\_LDFLAGS = &lt;br /&gt;
      foo\_DEPENDENCIES = &lt;br /&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;静态库&lt;/td&gt;
      &lt;td&gt;
      lib\_LIBRARIES = libfoo.a &lt;br /&gt;
      foo\_a\_SOURCES = &lt;br /&gt;
      foo\_a\_LDADD = &lt;br /&gt;
      foo\_a\_LIBADD = &lt;br /&gt;
      foo\_a\_LDFLAGS = &lt;br /&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;头文件&lt;/td&gt;
      &lt;td&gt;
      include\_HEADERS = foo.h (已被替代) &lt;br /&gt;
    AM\_CPPFLAGS
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;数据文件&lt;/td&gt;
      &lt;td&gt;data\_DATA = data1 data2 &lt;/td&gt;
    &lt;/tr&gt;
  &amp;lt;/tbody&amp;gt;
&amp;lt;/table&amp;gt;

   对于可执行文件和静态库类型，如果只想编译，不想安装到系统中，可以用noinst_PROGRAMS代替bin_PROGRAMS，noinst_LIBRARIES代替lib_LIBRARIES.  

可用的全局变量
&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;变量&lt;/th&gt;
      &lt;th&gt;含义&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tfoot&gt;
    &lt;tr&gt;
      &lt;td&gt;AM\_CPPFLAGS&lt;/td&gt;
      &lt;td&gt;链接时候需要的头文件地址&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;LDADD&lt;/td&gt;
      &lt;td&gt;
      链接时候需要的库文件
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;AM\_LDFLAGS&lt;/td&gt;
      &lt;td&gt;
      链接时需要库文件选项标志 -L
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;AM\_CFLAGS&lt;/td&gt;
      &lt;td&gt;对上面三个的补充,如 -Wall -O3 -g&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;SUBDIRS&lt;/td&gt;
      &lt;td&gt;在处理目录之前要递归处理那些子目录&lt;/td&gt;
    &lt;/tr&gt;
  &amp;lt;/tbody&amp;gt;
&amp;lt;/table&amp;gt;
加AM的意思是：不加AM的对应的变量，设计给包的用户用的，即用户可以这样：./configure CFLAGS='-Wall'。如果你在Makefile.am中也用CFLAGS的话也可以，只不过会被用户的覆盖。所以，你要加个AM_前缀，表示这是给开发者用的变量，不会被用户定义的覆盖。LDADD 用于加-l的，这个与用户无关，所以没有AM_前缀的用法。这里提到的四个变量，将会用在本Makefile.am相关的所有预处理，编译和链接。

SUBDIRS:你哪个地方想要生成xx（比如由源文件生成库），安装xx（比如doc中的man文件），都得有Makefile.am。如果按照层次组织的话，则每一级目录都得写Makefile.am，上层点的目录会有子目录，则上层目录中的Makefile.am只需写SUBDIRS = sub1 sub2 sub3即可。这里还有个关键是： 靠 sub1 sub2 sub3的顺序，指定了编译顺序. 如果sub1 sub2是库，sub3是程序要用它们，那么这样指定是正确的

基本相对路径
&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;路径变量&lt;/th&gt;
      &lt;th&gt;含义&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tfoot&gt;
    &lt;tr&gt;
      &lt;td&gt;$(top_srcdir)&lt;/td&gt;
      &lt;td&gt;工程最顶层的目录路径&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;$(top_builddir)&lt;/td&gt;
      &lt;td&gt;
      定义了生成目标文件上最上层的目录，用于引用.o等编译出来的目标文件
      &lt;/td&gt;
    &lt;/tr&gt;
  &amp;lt;/tbody&amp;gt;
&amp;lt;/table&amp;gt;


&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;bin_PROGRAMS &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; client

client_SOURCES &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; key.c connect.c client.c main.c session.c hash.c
client_CPPFLAGS &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-DCONFIG_DIR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;sysconfdir&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-DLIBRARY_DIR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;pkglibdir&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;
client_LDFLAGS &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-export-dynamic&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-lmemcached&lt;/span&gt;
noinst_HEADERS &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; client.h

INCLUDES &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-I&lt;/span&gt;/usr/local/libmemcached/include/

client_LDADD &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;top_builddir&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;/sx/libsession.la &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
                           &lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;top_builddir&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;/util/libutil.la&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;


bin\_PROGRAMS：表示指定要生成的可执行应用程序文件，这表示可执行文件在安装时需要被安装到系统中，如果只是想编译。不想被安装到系统中，可以用noinst_PROGRAMS来代替。  
PROGRAMS知道这是一个可执行文件。  
client表示编译的目标文件。  
bin表示目录文件被安装到系统的目录。  
后面的包括头文件，静态库的定义都是这种形式，如lib_LIBRARIES=util，表示将util库安装到lib目录下。继续解释上面的文件  

client\_SOURCES：表示生成可执行应用程序所用的源文件，这里注意，client_是由前面的bin_PROGRAMS指定的，如果前面是生成example,那么这里就是example_SOURCES，其它的类似标识也是一样。  

client\_CPPFLAGS：这和Makefile文件中一样，表示C语言预处理器参数，这里指定了DCONFIG_DIR，以后在程序中，就可以直接使用CONFIG_DIR,不要把这个和另一个CFLAGS混淆，后者表示编译器参数。  

client\_LDFLAGS：这个表示在连接时所需要的库文件选项标识。这个也就是对应一些如-l,-shared等选项。  

noinst\_HEADERS：这个表示该头文件只是参加可执行文件的编译，而不用安装到安装目录下。如果需要安装到系统中，可以用include_HEADERS来代替。  

INCLUDES：连接时所需要的头文件。  

client\_LDADD：连接时所需要的库文件,这里表示需要两个库文件的支持，下面会看到这个库文件又是怎么用Makefile.am文件后成的。  



&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;projectlibdir&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;libdir&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt; //新建一个目录，就是该目录就是lib目录
&lt;span class=&quot;nv&quot;&gt;projectlib_PROGRAMS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;project.so
&lt;span class=&quot;nv&quot;&gt;project_so_SOURCES&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;xxx.C
&lt;span class=&quot;nv&quot;&gt;project_so_LDFLAGS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-shared&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-fpic&lt;/span&gt; //GCC编译动态库的选项&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

想要编译XXX.so文件，需要用_PROGRAMS类型，这里一个关于安装路径要注意的问题是，我们一般希望将动态库安装到lib目录下，按照前面所讨论的，只需要写成lib_PROGRAMS就可以了，因为前面的lib表示安装路径，但是automake不允许这么直接定义，可以采用下面的办法，也是将动态库安装到lib目录下



### 如何编译libtool库 ###
对于跨平台可移植的库来说，推荐使用libtool编译，而且Automake内置了libtool的支持，只需要将编译类型修改为_LTLIBRARIES即可。  
需要注意的是：如果要使用libtool编译，需要在configure.ac中添加LT_INIT宏，同时注释掉AC_PROG_RANLIB，因为使用了LT_INIT后，AC_PROG_RANLIB就没有作用了。  

1.标准安装路径
默认安装路径为：$(prefix) = /usr/local，可以通过./configure --prefix=&lt;new_path&gt;的方法来覆盖。
其它的预定义目录还包括：bindir = $(prefix)/bin, libdir = $(prefix)/lib, datadir = $(prefix)/share, sysconfdir = $(prefix)/etc等等。

### configure ###
生成对应的Makefile


更多详情可用参考automake 文档中的[Variable Index](http://www.gnu.org/software/automake/manual/html_node/Variable-Index.html#Variable-Index) 附录

参考
http://www.cnblogs.com/TheGrandDesign/articles/2344675.html
http://blog.sina.com.cn/s/blog_6d8df7d00100ukid.html
http://blog.csdn.net/zmxiangde_88/article/details/8024223
http://www.ibm.com/developerworks/cn/linux/l-makefile/
http://www.cnblogs.com/shenlian/archive/2011/10/21/2220367.html

&lt;/new_path&gt;&lt;/tfoot&gt;&lt;/table&gt;&lt;/tfoot&gt;&lt;/table&gt;&lt;/tfoot&gt;&lt;/table&gt;
</content>
 </entry>
 
 <entry>
   <title>KLone</title>
   <link href="/posts/Klone/"/>
   <updated>2015-06-03T00:00:00+08:00</updated>
   <id>/posts/Klone</id>
   <content type="html">&lt;p&gt;&lt;a href=&quot;http://www.koanlogic.com/klone/index.html&quot;&gt;KLone&lt;/a&gt; is a fully-featured, multiplatform, web application development framework, targeted especially for embedded systems and appliances&lt;br /&gt;
在os x系统上面编译失败,ubuntu 很顺利就编译通过了. 问题还不清楚&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;110 /usr/include/libkern/i386/_OSByteOrder.h:34:43: note: expanded from macro '__DARWIN_OS_INLINE'
111 #        define __DARWIN_OS_INLINE static inline
112                                           ^
113 &amp;lt;command line&amp;gt;:2:16: note: expanded from here
114 #define inline 1
115                ^
116 In file included from toolbox/memory.c:5:
117 In file included from /usr/include/stdlib.h:65:
118 In file included from /usr/include/sys/wait.h:186:
119 In file included from /usr/include/machine/endian.h:35:
120 In file included from /usr/include/i386/endian.h:99:
121 In file included from /usr/include/sys/_endian.h:130:
122 In file included from /usr/include/libkern/_OSByteOrder.h:66:
123 /usr/include/libkern/i386/_OSByteOrder.h:68:1: error: expected identifier or '('
124 __DARWIN_OS_INLINE
125 ^
126 /usr/include/libkern/i386/_OSByteOrder.h:34:43: note: expanded from macro '__DARWIN_OS_INLINE'
127 #        define __DARWIN_OS_INLINE static inline
128                                           ^
129 &amp;lt;command line&amp;gt;:2:16: note: expanded from here
130 #define inline 1
131                ^
132 3 errors generated.
133 make[3]: *** [toolbox/memory.o] Error 1
134 make[2]: *** [srcs.all] Error 2
135 for d in missing toolbox ; do rm -f $d &amp;amp;&amp;amp; ln -s ../$d ; done
136 rm: missing: is a directory
137 rm: toolbox: is a directory
138 make[4]: *** [all-hook-pre] Error 1
139 make[3]: *** [u.all] Error 2
140 make[2]: *** [include.all] Error 2)&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/koanlogic/klone/wiki&quot;&gt;klone wiki&lt;/a&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;http://stackoverflow.com/questions/9597847/im-searching-a-cgi-lib-in-c-to-build-a-restful-web-service/10322654#10322654&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>uWSGI,nginx部署基于Django的cms开源项目mezzanine</title>
   <link href="/posts/uwsgi,nginx-Django-cms-mezzanine/"/>
   <updated>2015-05-27T00:00:00+08:00</updated>
   <id>/posts/uwsgi,nginx-Django-cms-mezzanine</id>
   <content type="html">&lt;p&gt;很早就当搭建个人的cms系统，趁着休假期间时间充裕前后后用了几天时间终于勉强可以访问.&lt;br /&gt;
vps使用的linode，10$每月，也曾经考虑DigtalOcean,不过网上评价不高,也不想冒险.&lt;br /&gt;
  cms系统的选择问题，之前自己使用github提供的静态页面blog，想现看看基于Django的开源搭建，发现这样的项目不多而且使用的人也不少，直接导致了后面的一路坑.(会不会后悔没有使用wordpress : \ )&lt;br /&gt;
  Mezzanine is a powerful, consistent, and flexible content management platform. Built using the Django framework, Mezzanine provides a simple yet highly extensible architecture that encourages diving in and hacking on the code.&lt;/p&gt;

&lt;p&gt;Django建议使用apache,mod_python部署，这里用ngnix,uwsgi,数据库选择postgres.&lt;br /&gt;
vps系统为ubuntu14.04lts.&lt;/p&gt;
&lt;h2 id=&quot;mezzanine安装&quot;&gt;Mezzanine安装&lt;/h2&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;pip &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;mezzaniz&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;或源码安装&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;python setup.py &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;创建一个新的mezzanine项目&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;mezzanine-project project_name
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;project_name&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;创建和配置对应的数据库,执行下面的步骤之前要安装和配置好所使用的数据库，这里使用的是postgres&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;python manage.py createdb &lt;span class=&quot;nt&quot;&gt;--noinput&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;运行development mode，模式访问http://127.0.0.1:8000，用于调试开发&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;python manage.py runserver&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;postgres-安装配置&quot;&gt;postgres 安装配置&lt;/h2&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;apt-get &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;postgresql-9.4&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;根据django文档提示还需要安装Psycopg.根据django文档提示还需要安装Psycopg&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;port &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;py27-psycopg2&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;配置cms系统需要的数据库
修改mezzanine创建项目中的local_setting.py 文件对应的配置修改mezzanine创建项目中的$&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;DATABASES = {
    &quot;default&quot;: {
            # Add &quot;postgresql_psycopg2&quot;, &quot;mysql&quot;, &quot;sqlite3&quot; or &quot;oracle&quot;.
            &quot;ENGINE&quot;: &quot;django.db.backends.postgresql_psycopg2&quot;,
            # DB name or path to database file if using sqlite3.  文本信息储存的的数据库，需要自己创建
            &quot;NAME&quot;: &quot;blog_db&quot;,
            # Not used with sqlite3. 链接用户名
            &quot;USER&quot;: &quot;postgres&quot;,  
            # Not used with sqlite3. 链接密码
            &quot;PASSWORD&quot;: &quot;*****&quot;,
            # Set to empty string for localhost. Not used with sqlite3.
            &quot;HOST&quot;: &quot;127.0.0.1&quot;,
            # Set to empty string for default. Not used with sqlite3.
            &quot;PORT&quot;: &quot;5432&quot;,
        }
}&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;blockquote&gt;
  &lt;p&gt;这里需要注意的是如果不想使用mezzanine默认的数据库sqlite3，需要自己创建先配置好local_setting.py文件再运行如下命令&lt;/p&gt;
&lt;/blockquote&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;python manage.py createdb &lt;span class=&quot;nt&quot;&gt;--noinput&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;nginx配置&quot;&gt;nginx配置&lt;/h2&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;nginx
&lt;span class=&quot;nb&quot;&gt;sudo&lt;/span&gt; /etc/init.d/nginx start    &lt;span class=&quot;c&quot;&gt;# start nginx&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;配置部署站点nginx config文件文件
/etc/nginx/sites-enabled/blog_nignx.conf&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;upstream mezzanine_uwsgi{
    server unix:////home/Bran/mysite.sock; # for a file socket
    #server 127.0.0.1:8001; # for a web port socket (we'll use this first)
}
server {
    listen 80 ;
    server_name 45.56.94.238; # substitute your machine's IP address or FQDN
    charset     utf-8;


    location / {
            root /home/Bran/bran_blog/;
            uwsgi_pass mezzanine_uwsgi;
            include /home/Bran/bran_blog/uwsgi_params;
        }

    location /static {
            autoindex on;
            alias /home/Bran/bran_blog/static;
            access_log off;
            log_not_found off;
        }


    location /media {
            alias /home/Bran/bran_blog/static/media;
        }

    location /robots.txt {
            alias /home/Bran/bran_blog/static;
            access_log off;
            log_not_found off;
        }

    location /favicon.ico {
            alias /home/Bran/bran_blog/static/img;
            access_log off;
            log_not_found off;
        }
}&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;配置ngnix访问静态文件的路径.
其中static media robots.txt 均为项目mezzanine项目创建时默认生成的，只需要配置正确路径即可&lt;/p&gt;

&lt;p&gt;在运行ngnix之前先需要收集django项目的静态文件到配置对应的路径(static/), 首先需要编辑mysite/setting.py
添加收集的路径地址&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;STATIC_ROOT = os.path.join(BASE_DIR, &quot;static/&quot;)&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;接着再运行&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;python manage.py collectstatic&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;测试nginx&quot;&gt;测试nginx&lt;/h3&gt;
&lt;p&gt;restart nginx&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;sudo&lt;/span&gt; /etc/init.d/nginx restart&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;把某个含有内容的文件放到media目录下面, 命名为text.txt,对应我的路径为/home/Bran/bran_blog/static/media/text.txt.&lt;/p&gt;

&lt;p&gt;尝试访问http://example.com/media/text.txt,如果能访问的文本中的文件就说明nginx 配置没有问题,可以正常进行服务&lt;/p&gt;

&lt;h2 id=&quot;uwsgi&quot;&gt;uWSGI&lt;/h2&gt;
&lt;p&gt;The uWSGI project aims at developing a full stack for building hosting services
安装uWSGI&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;pip &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;uwsgi&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;测试脚本&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# test.py
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;application&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start_response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;start_response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'200 OK'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Content-Type'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'text/html'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)])&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello World&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# python3
&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;#return [&quot;Hello World&quot;] # python2&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;运行uwsgi&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;uwsgi &lt;span class=&quot;nt&quot;&gt;--http&lt;/span&gt; :8000 &lt;span class=&quot;nt&quot;&gt;--wsgi-file&lt;/span&gt; test.py&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;测试是否成功&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;http://example.com:8000
the web client &amp;lt;-&amp;gt; uWSGI &amp;lt;-&amp;gt; Python&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;uwsgi测试我们的django项目.
本地测试&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;python manage.py runserver 0.0.0.0:8000
uwsgi &lt;span class=&quot;nt&quot;&gt;--http&lt;/span&gt; :8000 &lt;span class=&quot;nt&quot;&gt;--module&lt;/span&gt; bran_blog.wsgi&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;bran_blog.wsgi 表示以bran_blog命名的wsgi模块(load the specified wsgi module), 在当前项目中是bran_blog.wsgi&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;这里需要注意的是在项目上级目录中运行，不要在项目当前目录运行，否则会包错误找不到bran_blog module.
the web client &amp;lt;-&amp;gt; uWSGI &amp;lt;-&amp;gt; Django&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;配置uwsgi_params&quot;&gt;配置uwsgi_params&lt;/h3&gt;
&lt;p&gt;you will need the uwsgi_params file, which is available in the nginx directory of the uWSGI distribution, or from https://github.com/nginx/nginx/blob/master/conf/uwsgi_params
uwsgi_param 要与nginx.conf文件中的路径相对应&lt;/p&gt;

&lt;h2 id=&quot;nginx-and-uwsgi&quot;&gt;nginx and uWSGI&lt;/h2&gt;

&lt;p&gt;通过nginx访问test.py&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;uwsgi &lt;span class=&quot;nt&quot;&gt;--socket&lt;/span&gt; :8001 &lt;span class=&quot;nt&quot;&gt;--wsgi-file&lt;/span&gt; test.py&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;这里的8001是同bran_blog.conf 中的127.0.0.1:8001是对应的端口,nginx通过8001端口与uwsgi模块通信.
访问http://example.com:80
the web client &amp;lt;-&amp;gt; the web server &amp;lt;-&amp;gt; the socket &amp;lt;-&amp;gt; uWSGI &amp;lt;-&amp;gt; Python
最后浏览器呈现出来的信息是通过8001端口提供给数据&lt;/p&gt;

&lt;h3 id=&quot;使用unix-socket代替ports&quot;&gt;使用unix socket代替ports&lt;/h3&gt;
&lt;p&gt;只需要编辑配置文件 blog_nginx.conf&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;server unix:///path/to/your/mysite/mysite.sock; # for a file socket
# server 127.0.0.1:8001; # for a web port socket (we'll use this first)&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;这里需要重启nginx&lt;/p&gt;

&lt;p&gt;运行uWSGI
uwsgi –socket mysite.sock –wsgi-file test.py –chmod-socket=666
参数中的sock与配置文件中的sock一个是相对路径一个是绝对路径&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;这里请注意系统创建sock的权限问题&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;run-ini-file&quot;&gt;run .ini file&lt;/h3&gt;
&lt;p&gt;uWSGI也支持ini文件配置运行&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;# mysite_uwsgi.ini file
[uwsgi]

# Django-related settings
# the base directory (full path)
chdir           = /home/Bran
# Django's wsgi file
module          = bran_blog.wsgi
# the virtualenv (full path)
#home            = /home/Bran

# process-related settings
# master
master          = true
# maximum number of worker processes
processes       = 10
# the socket (use the full path to be safe
socket          = /home/Bran/mezzanine.sock
# ... with appropriate permissions - may be needed
chmod-socket    = 666
# clear environment on exit
vacuum          = true&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;运行&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;uwsgi &lt;span class=&quot;nt&quot;&gt;--ini&lt;/span&gt; mysite_uwsgi.ini &lt;span class=&quot;c&quot;&gt;# the --ini option is used to specify a file&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;可以配置rc.local  添加到系统默认启动过程中&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;这里遇到一个问题，processes设置大于1时候会有session问还没解决&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;大概的配置流程就是如上，更详细的信息可以参考uWSGI官网的说明,说明的步骤比较详细对于我这个不懂django的新手,都可以完全配置成功.&lt;/strong&gt;&lt;br /&gt;
&lt;a href=&quot;http://uwsgi-docs.readthedocs.org/en/latest/tutorials/Django_and_nginx.html&quot;&gt;Setting up Django and your web server with uWSGI and nginx&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;遇到的问题&quot;&gt;遇到的问题&lt;/h2&gt;
&lt;p&gt;由于自己对django不了解遇到一些问题，还有待解决，再有就是不太适应使用html格式来写文章&lt;br /&gt;
1.uwsgi中processes配置为大于1运行之后，会有seesion问题导致多次重复登陆.&lt;br /&gt;
2.更换themes不成功，mezzanine不多的免费&lt;a href=&quot;https://github.com/renyi/mezzanine-themes&quot;&gt;themes&lt;/a&gt;还没有配置成功&lt;/p&gt;

&lt;p&gt;涉及完成文章参考web url:&lt;br /&gt;
&lt;a href=&quot;https://wiki.python.org/moin/PythonBlogSoftware&quot;&gt;PythonBlogSoftware&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;http://uwsgi-docs.readthedocs.org/en/latest/tutorials/Django_and_nginx.html&quot;&gt;Setting up Django and your web server with uWSGI and nginx&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;http://uwsgi-docs.readthedocs.org/en/latest/#&quot;&gt;uwsgi&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://github.com/nginx/nginx/blob/master/conf/uwsgi_params&quot;&gt;uwsgi_params&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://github.com/renyi/mezzanine-themes&quot;&gt;mezzaine-themes&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;http://rosslaird.com/blog/customizing-mezzanine/&quot;&gt;customizing-mezzanine&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;http://www.phodal.com/blog/Mezzanine-Django-Linux-Nginx/&quot;&gt;Mezzanine Django Linux Nginx快速python CMS部署&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;http://initd.org/psycopg/&quot;&gt;Psycopg&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;http://www.postgresql.org/&quot;&gt;PostgreSQL&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://liangsun.org/posts/django-plus-uwsgi-plus-nginx/&quot;&gt;Django + uWSGI + Nginx&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;http://grokbase.com/t/gg/mezzanine-users/12byf39adw/wordpress-vs-mezzanine&quot;&gt;Wordpress vs. Mezzanine&lt;/a&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://stackoverflow.com/questions/28024595/how-to-deploy-installing-mezzanine-theme&quot;&gt;How To Deploy: Installing Mezzanine Theme&lt;/a&gt; &lt;br /&gt;
登陆问题&lt;br /&gt;
&lt;a href=&quot;http://stackoverflow.com/questions/806835/django-redirect-to-previous-page-after-login?rq=1&quot;&gt;Django: Redirect to previous page after login&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;http://stackoverflow.com/questions/13186693/why-second-user-login-redirects-me-to-accounts-profile-url&quot;&gt;Why second user login redirects me to /accounts/profile/ url?&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;http://stackoverflow.com/questions/10244331/django-authentication-redirect&quot;&gt;Django - Authentication - redirect&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;http://stackoverflow.com/questions/2176172/django-admin-authentication-failure&quot;&gt;Django admin authentication failure&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;http://stackoverflow.com/questions/17725616/uwsgi-processes-lose-django-sessions&quot;&gt;uwsgi-processes-lose-django-sessions&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;http://stackoverflow.com/questions/7560237/problem-with-session-in-django-after-login?rq=1&quot;&gt;Problem with session in Django after login&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;http://stackoverflow.com/questions/806835/django-redirect-to-previous-page-after-login&quot;&gt;Django: Redirect to previous page after login&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;http://stackoverflow.com/questions/16199463/not-understanding-django-admin-login&quot;&gt;Not understanding Django admin login&lt;/a&gt;&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Github pages + jekyll build person site</title>
   <link href="/posts/build-blog/"/>
   <updated>2014-03-15T00:00:00+08:00</updated>
   <id>/posts/build-blog</id>
   <content type="html">&lt;p&gt;github 提供很方便的方法用搭建自己的站点,比起wordpress要简单方便很多,相对而言功能比较单一,不过对我而言也足够了.&lt;/p&gt;

&lt;h2 id=&quot;builed-github-pages&quot;&gt;Builed github pages&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://pages.github.com/&quot;&gt;Github pages&lt;/a&gt;,简单说建立新的repository,使用github指定的site address就可以进行基础的访问.
需要注意的是参考其他guides可能会发现要求建立除了master以外的gh-pages,而这就涉及到&lt;a href=&quot;https://help.github.com/articles/user-organization-and-project-pages&quot;&gt;User,Organization,and Project
Pages&lt;/a&gt;,我的理解是master是建立site的发布分支,通过web访问http://branzhang.github.io/github提供类型的网址都是在请求的此分支的内容,gh-pages用于绑定domain后访问的内容,gh-pages还有作用就是对于已经建立的repo,比如&lt;a href=&quot;https://github.com/BranZhang/OSC&quot;&gt;OSC&lt;/a&gt;,建立gh-pages分支后可以进行web&lt;a href=&quot;http://branzhang.github.io/OSC/&quot;&gt;链接&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;easily-keep-gh-pages-in-sync-with-master&quot;&gt;Easily keep gh-pages in sync with master&lt;/h2&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git checkout gh-pages // go to the gh-pages branch
git rebase master // bring gh-pages up to &lt;span class=&quot;nb&quot;&gt;date &lt;/span&gt;with master
git push origin gh-pages // commit the changes
git checkout master // &lt;span class=&quot;k&quot;&gt;return &lt;/span&gt;to the master branch&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;introducing-jekyll&quot;&gt;Introducing Jekyll&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://jekyllrb.com&quot;&gt;Jekyll&lt;/a&gt; is a static site generator, an open-source tool for creating simple yet powerful websites of all shapes and sizes. From &lt;a href=&quot;https://github.com/mojombo/jekyll/blob/master/README.markdown&quot;&gt;the project’s readme&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Jekyll is a simple, blog aware, static site generator. It takes a template directory […] and spits out a complete, static website suitable for serving with Apache or your favorite web server. This is also the engine behind GitHub Pages, which you can use to host your project’s page or blog right here from GitHub.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Jekyll takes your content, renders Markdown and Liquid templates, and spits out a complete, static website ready to be served by Apache, Nginx or another web server.&lt;/p&gt;

&lt;p&gt;Remember Jekyll is a processing engine. There are two main types of parsing in Jekyll.&lt;/p&gt;

&lt;p&gt;Content parsing.
This is done with textile or markdown.
Template parsing.
This is done with the liquid templating language.&lt;/p&gt;

&lt;h3 id=&quot;use-lanyon-theme&quot;&gt;Use lanyon theme&lt;/h3&gt;
&lt;p&gt;使用开源的主题可以节省很多订制时间,也方便参考修改
&lt;a href=&quot;https://github.com/poole/lanyon&quot;&gt;Lanyon&lt;/a&gt; is an unassuming Jekyll theme that places content first by tucking away navigation in a hidden drawer. It’s based on Poole, the Jekyll butler.&lt;/p&gt;

&lt;h3 id=&quot;what-is-liquid&quot;&gt;What is &lt;a href=&quot;http://jekyllbootstrap.com/lessons/jekyll-introduction.html#toc_16&quot;&gt;Liquid&lt;/a&gt;?&lt;/h3&gt;

&lt;p&gt;Liquid is a secure templating language developed by Shopify. Liquid is designed for end-users to be able to execute logic within template files without imposing any security risk on the hosting server.&lt;/p&gt;

&lt;p&gt;Jekyll uses Liquid to generate the post content within the final page layout structure and as the primary interface for working with your site and post/page data.&lt;/p&gt;

&lt;p&gt;_layouts目录下面存放这些模板&lt;/p&gt;

&lt;h3 id=&quot;what-is-makedown&quot;&gt;What is &lt;a href=&quot;http://daringfireball.net/projects/markdown/&quot;&gt;Makedown&lt;/a&gt;?&lt;/h3&gt;
&lt;p&gt;Markdown is a text-to-HTML conversion tool for web writers. Markdown allows you to write using an easy-to-read, easy-to-write plain text format, then convert it to structurally valid XHTML (or HTML).&lt;/p&gt;

&lt;h6 id=&quot;参考&quot;&gt;参考&lt;/h6&gt;
&lt;p&gt;&lt;a href=&quot;http://24ways.org/2013/get-started-with-github-pages/&quot;&gt;http://24ways.org/2013/get-started-with-github-pages/&lt;/a&gt;
&lt;a href=&quot;https://help.github.com/categories/20/articles&quot;&gt;https://help.github.com/categories/20/articles&lt;/a&gt;
&lt;a href=&quot;http://joshualande.com/2014/02/03/jekyll-github-pages-poole/&quot;&gt;http://joshualande.com/2014/02/03/jekyll-github-pages-poole/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Take a gander at some existing &lt;a href=&quot;https://github.com/jekyll/jekyll/wiki/sites&quot;&gt;Sites&lt;/a&gt;&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Introducing Lanyon</title>
   <link href="/posts/introducing-lanyon/"/>
   <updated>2014-01-02T00:00:00+08:00</updated>
   <id>/posts/introducing-lanyon</id>
   <content type="html">&lt;p&gt;Lanyon is an unassuming &lt;a href=&quot;http://jekyllrb.com&quot;&gt;Jekyll&lt;/a&gt; theme that places content first by tucking away navigation in a hidden drawer. It’s based on &lt;a href=&quot;http://getpoole.com&quot;&gt;Poole&lt;/a&gt;, the Jekyll butler.&lt;/p&gt;

&lt;h3 id=&quot;built-on-poole&quot;&gt;Built on Poole&lt;/h3&gt;

&lt;p&gt;Poole is the Jekyll Butler, serving as an upstanding and effective foundation for Jekyll themes by &lt;a href=&quot;https://twitter.com/mdo&quot;&gt;@mdo&lt;/a&gt;. Poole, and every theme built on it (like Lanyon here) includes the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Complete Jekyll setup included (layouts, config, &lt;a href=&quot;/404&quot;&gt;404&lt;/a&gt;, &lt;a href=&quot;/atom.xml&quot;&gt;RSS feed&lt;/a&gt;, posts, and &lt;a href=&quot;/about&quot;&gt;example page&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Mobile friendly design and development&lt;/li&gt;
  &lt;li&gt;Easily scalable text and component sizing with &lt;code class=&quot;highlighter-rouge&quot;&gt;rem&lt;/code&gt; units in the CSS&lt;/li&gt;
  &lt;li&gt;Support for a wide gamut of HTML elements&lt;/li&gt;
  &lt;li&gt;Related posts (time-based, because Jekyll) below each post&lt;/li&gt;
  &lt;li&gt;Syntax highlighting, courtesy Pygments (the Python-based code snippet highlighter)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;lanyon-features&quot;&gt;Lanyon features&lt;/h3&gt;

&lt;p&gt;In addition to the features of Poole, Lanyon adds the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Toggleable sliding sidebar (built with only CSS) via &lt;strong&gt;☰&lt;/strong&gt; link in top corner&lt;/li&gt;
  &lt;li&gt;Sidebar includes support for textual modules and a dynamically generated navigation with active link support&lt;/li&gt;
  &lt;li&gt;Two orientations for content and sidebar, default (left sidebar) and &lt;a href=&quot;https://github.com/poole/lanyon#reverse-layout&quot;&gt;reverse&lt;/a&gt; (right sidebar), available via &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;body&amp;gt;&lt;/code&gt; classes&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/poole/lanyon#themes&quot;&gt;Eight optional color schemes&lt;/a&gt;, available via &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;body&amp;gt;&lt;/code&gt; classes&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/poole/lanyon#readme&quot;&gt;Head to the readme&lt;/a&gt; to learn more.&lt;/p&gt;

&lt;h3 id=&quot;browser-support&quot;&gt;Browser support&lt;/h3&gt;

&lt;p&gt;Lanyon is by preference a forward-thinking project. In addition to the latest versions of Chrome, Safari (mobile and desktop), and Firefox, it is only compatible with Internet Explorer 9 and above.&lt;/p&gt;

&lt;h3 id=&quot;download&quot;&gt;Download&lt;/h3&gt;

&lt;p&gt;Lanyon is developed on and hosted with GitHub. Head to the &lt;a href=&quot;https://github.com/poole/lanyon&quot;&gt;GitHub repository&lt;/a&gt; for downloads, bug reports, and features requests.&lt;/p&gt;

&lt;p&gt;Thanks!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Liquid</title>
   <link href="/posts/Liquid-and-Markdown-%E7%94%A8%E6%B3%95/"/>
   <updated>2014-01-01T00:00:00+08:00</updated>
   <id>/posts/Liquid-and-Markdown-用法</id>
   <content type="html">&lt;p&gt;###Liquid&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;代码插入高亮显示&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;show&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@widget&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Widget&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;respond_to&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;html&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# show.html.erb&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;json&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;render&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;json: &lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@widget&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sw_upgradeEvent_observer_start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;m_upgradeevent_thrd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sw_thrd_open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;tUpgradeEvent&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;64&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1024&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;upgrade_event_proc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_upgradeevent_thrd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;sw_thrd_resume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_upgradeevent_thrd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

</content>
 </entry>
 
 
</feed>
